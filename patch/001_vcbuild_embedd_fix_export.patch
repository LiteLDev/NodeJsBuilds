diff --git a/node.gyp b/node.gyp
index 74e9f9cc2e..b6e2fabedc 100644
--- a/node.gyp
+++ b/node.gyp
@@ -137,214 +137,6 @@
         }],
       ]
     },
-    {
-      'target_name': '<(node_core_target_name)',
-      'type': 'executable',
-
-      'defines': [
-        'NODE_ARCH="<(target_arch)"',
-        'NODE_PLATFORM="<(OS)"',
-        'NODE_WANT_INTERNALS=1',
-      ],
-
-      'includes': [
-        'node.gypi'
-      ],
-
-      'include_dirs': [
-        'src',
-        'deps/v8/include'
-      ],
-
-      'sources': [
-        'src/node_main.cc'
-      ],
-
-      'dependencies': [
-        'deps/histogram/histogram.gyp:histogram',
-        'deps/uvwasi/uvwasi.gyp:uvwasi',
-      ],
-
-      'msvs_settings': {
-        'VCLinkerTool': {
-          'GenerateMapFile': 'true', # /MAP
-          'MapExports': 'true', # /MAPINFO:EXPORTS
-          'RandomizedBaseAddress': 2, # enable ASLR
-          'DataExecutionPrevention': 2, # enable DEP
-          'AllowIsolation': 'true',
-        },
-      },
-
-      # - "C4244: conversion from 'type1' to 'type2', possible loss of data"
-      #   Ususaly safe. Disable for `dep`, enable for `src`
-      'msvs_disabled_warnings!': [4244],
-
-      'conditions': [
-        [ 'error_on_warn=="true"', {
-          'cflags': ['-Werror'],
-          'xcode_settings': {
-            'WARNING_CFLAGS': [ '-Werror' ],
-          },
-        }],
-        [ 'node_intermediate_lib_type=="static_library" and '
-            'node_shared=="true" and OS=="aix"', {
-          # For AIX, shared lib is linked by static lib and .exp. In the
-          # case here, the executable needs to link to shared lib.
-          # Therefore, use 'node_aix_shared' target to generate the
-          # shared lib and then executable.
-          'dependencies': [ 'node_aix_shared' ],
-        }, {
-          'dependencies': [ '<(node_lib_target_name)' ],
-        }],
-        [ 'node_intermediate_lib_type=="static_library" and node_shared=="false"', {
-          'xcode_settings': {
-            'OTHER_LDFLAGS': [
-              '-Wl,-force_load,<(PRODUCT_DIR)/<(STATIC_LIB_PREFIX)<(node_core_target_name)<(STATIC_LIB_SUFFIX)',
-              '-Wl,-force_load,<(PRODUCT_DIR)/<(STATIC_LIB_PREFIX)v8_base_without_compiler<(STATIC_LIB_SUFFIX)',
-            ],
-          },
-          'msvs_settings': {
-            'VCLinkerTool': {
-              'AdditionalOptions': [
-                '/WHOLEARCHIVE:<(node_lib_target_name)<(STATIC_LIB_SUFFIX)',
-                '/WHOLEARCHIVE:<(STATIC_LIB_PREFIX)v8_base_without_compiler<(STATIC_LIB_SUFFIX)',
-              ],
-            },
-          },
-          'conditions': [
-            ['OS != "aix" and OS != "mac"', {
-              'ldflags': [
-                '-Wl,--whole-archive',
-                '<(obj_dir)/<(STATIC_LIB_PREFIX)<(node_core_target_name)<(STATIC_LIB_SUFFIX)',
-                '<(obj_dir)/tools/v8_gypfiles/<(STATIC_LIB_PREFIX)v8_base_without_compiler<(STATIC_LIB_SUFFIX)',
-                '-Wl,--no-whole-archive',
-              ],
-            }],
-            [ 'OS=="win"', {
-              'sources': [ 'src/res/node.rc' ],
-              'conditions': [
-                [ 'node_use_etw=="true"', {
-                  'sources': [
-                    'tools/msvs/genfiles/node_etw_provider.rc'
-                  ],
-                }],
-              ],
-            }],
-          ],
-        }],
-        [ 'node_shared=="true"', {
-          'xcode_settings': {
-            'OTHER_LDFLAGS': [ '-Wl,-rpath,@loader_path', ],
-          },
-        }],
-        [ 'enable_lto=="true"', {
-          'xcode_settings': {
-            'OTHER_LDFLAGS': [
-              # man ld -export_dynamic:
-              # Preserves all global symbols in main executables during LTO.
-              # Without this option, Link Time Optimization is allowed to
-              # inline and remove global functions. This option is used when
-              # a main executable may load a plug-in which requires certain
-              # symbols from the main executable.
-              '-Wl,-export_dynamic',
-            ],
-          },
-        }],
-        ['OS=="win"', {
-          'libraries': [
-            'Dbghelp.lib',
-            'winmm.lib',
-            'Ws2_32.lib',
-          ],
-        }],
-        ['node_with_ltcg=="true"', {
-          'msvs_settings': {
-            'VCCLCompilerTool': {
-              'WholeProgramOptimization': 'true'   # /GL, whole program optimization, needed for LTCG
-            },
-            'VCLibrarianTool': {
-              'AdditionalOptions': [
-                '/LTCG:INCREMENTAL',               # link time code generation
-              ],
-            },
-            'VCLinkerTool': {
-              'OptimizeReferences': 2,             # /OPT:REF
-              'EnableCOMDATFolding': 2,            # /OPT:ICF
-              'LinkIncremental': 1,                # disable incremental linking
-              'AdditionalOptions': [
-                '/LTCG:INCREMENTAL',               # incremental link-time code generation
-              ],
-            }
-          }
-        }, {
-          'msvs_settings': {
-            'VCCLCompilerTool': {
-              'WholeProgramOptimization': 'false'
-            },
-            'VCLinkerTool': {
-              'LinkIncremental': 2                 # enable incremental linking
-            },
-          },
-         }],
-        ['node_use_node_code_cache=="true"', {
-          'dependencies': [
-            'mkcodecache',
-          ],
-          'actions': [
-            {
-              'action_name': 'run_mkcodecache',
-              'process_outputs_as_sources': 1,
-              'inputs': [
-                '<(mkcodecache_exec)',
-              ],
-              'outputs': [
-                '<(SHARED_INTERMEDIATE_DIR)/node_code_cache.cc',
-              ],
-              'action': [
-                '<@(_inputs)',
-                '<@(_outputs)',
-              ],
-            },
-          ],
-        }, {
-          'sources': [
-            'src/node_code_cache_stub.cc'
-          ],
-        }],
-        ['node_use_node_snapshot=="true"', {
-          'dependencies': [
-            'node_mksnapshot',
-          ],
-          'actions': [
-            {
-              'action_name': 'node_mksnapshot',
-              'process_outputs_as_sources': 1,
-              'inputs': [
-                '<(node_mksnapshot_exec)',
-              ],
-              'outputs': [
-                '<(SHARED_INTERMEDIATE_DIR)/node_snapshot.cc',
-              ],
-              'action': [
-                '<@(_inputs)',
-                '<@(_outputs)',
-              ],
-            },
-          ],
-        }, {
-          'sources': [
-            'src/node_snapshot_stub.cc'
-          ],
-        }],
-        [ 'OS in "linux freebsd" and '
-          'target_arch=="x64"', {
-          'dependencies': [ 'node_text_start' ],
-          'ldflags+': [
-            '<(obj_dir)/<(node_text_start_object_path)'
-          ]
-        }],
-      ],
-    }, # node_core_target_name
     {
       'target_name': '<(node_lib_target_name)',
       'type': '<(node_intermediate_lib_type)',
@@ -641,6 +433,7 @@
             'Dbghelp',
             'Psapi',
             'Ws2_32',
+            'Winmm',
           ],
         }],
         [ 'node_use_etw=="true"', {
@@ -1001,368 +794,6 @@
         } ],
       ]
     }, # specialize_node_d
-    { # fuzz_url
-      'target_name': 'fuzz_url',
-      'type': 'executable',
-      'dependencies': [
-        '<(node_lib_target_name)',
-      ],
-      'includes': [
-        'node.gypi'
-      ],
-      'include_dirs': [
-        'src',
-      ],
-      'defines': [
-        'NODE_ARCH="<(target_arch)"',
-        'NODE_PLATFORM="<(OS)"',
-        'NODE_WANT_INTERNALS=1',
-      ],
-      'sources': [
-        'src/node_snapshot_stub.cc',
-        'src/node_code_cache_stub.cc',
-        'test/fuzzers/fuzz_url.cc',
-      ],
-      'conditions': [
-        ['OS=="linux"', {
-          'ldflags': [ '-fsanitize=fuzzer' ]
-        }],
-        # Ensure that ossfuzz flag has been set and that we are on Linux
-        [ 'OS!="linux" or ossfuzz!="true"', {
-          'type': 'none',
-        }],
-      ],
-    }, # fuzz_url
-    { # fuzz_env
-      'target_name': 'fuzz_env',
-      'type': 'executable',
-      'dependencies': [
-        '<(node_lib_target_name)',
-        'deps/histogram/histogram.gyp:histogram',
-        'deps/uvwasi/uvwasi.gyp:uvwasi',
-        'node_dtrace_header',
-        'node_dtrace_ustack',
-        'node_dtrace_provider',
-      ],
-      'includes': [
-        'node.gypi'
-      ],
-      'include_dirs': [
-        'src',
-        'tools/msvs/genfiles',
-        'deps/v8/include',
-        'deps/cares/include',
-        'deps/uv/include',
-        'deps/uvwasi/include',
-        'test/cctest',
-      ],
-      'defines': [
-        'NODE_ARCH="<(target_arch)"',
-        'NODE_PLATFORM="<(OS)"',
-        'NODE_WANT_INTERNALS=1',
-      ],
-      'sources': [
-        'src/node_snapshot_stub.cc',
-        'src/node_code_cache_stub.cc',
-        'test/fuzzers/fuzz_env.cc',
-      ],
-      'conditions': [
-        ['OS=="linux"', {
-          'ldflags': [ '-fsanitize=fuzzer' ]
-        }],
-        # Ensure that ossfuzz flag has been set and that we are on Linux
-        [ 'OS!="linux" or ossfuzz!="true"', {
-          'type': 'none',
-        }],
-      ],
-    }, # fuzz_env
-    {
-      'target_name': 'cctest',
-      'type': 'executable',
-
-      'dependencies': [
-        '<(node_lib_target_name)',
-        'deps/googletest/googletest.gyp:gtest',
-        'deps/googletest/googletest.gyp:gtest_main',
-        'deps/histogram/histogram.gyp:histogram',
-        'deps/uvwasi/uvwasi.gyp:uvwasi',
-        'node_dtrace_header',
-        'node_dtrace_ustack',
-        'node_dtrace_provider',
-      ],
-
-      'includes': [
-        'node.gypi'
-      ],
-
-      'include_dirs': [
-        'src',
-        'tools/msvs/genfiles',
-        'deps/v8/include',
-        'deps/cares/include',
-        'deps/uv/include',
-        'deps/uvwasi/include',
-        'test/cctest',
-      ],
-
-      'defines': [
-        'NODE_ARCH="<(target_arch)"',
-        'NODE_PLATFORM="<(OS)"',
-        'NODE_WANT_INTERNALS=1',
-      ],
-
-      'sources': [
-        'src/node_snapshot_stub.cc',
-        'src/node_code_cache_stub.cc',
-        'test/cctest/node_test_fixture.cc',
-        'test/cctest/node_test_fixture.h',
-        'test/cctest/test_aliased_buffer.cc',
-        'test/cctest/test_base64.cc',
-        'test/cctest/test_base_object_ptr.cc',
-        'test/cctest/test_node_postmortem_metadata.cc',
-        'test/cctest/test_environment.cc',
-        'test/cctest/test_js_native_api_v8.cc',
-        'test/cctest/test_linked_binding.cc',
-        'test/cctest/test_node_api.cc',
-        'test/cctest/test_per_process.cc',
-        'test/cctest/test_platform.cc',
-        'test/cctest/test_json_utils.cc',
-        'test/cctest/test_sockaddr.cc',
-        'test/cctest/test_traced_value.cc',
-        'test/cctest/test_util.cc',
-        'test/cctest/test_url.cc',
-      ],
-
-      'conditions': [
-        [ 'node_use_openssl=="true"', {
-          'defines': [
-            'HAVE_OPENSSL=1',
-          ],
-          'sources': [
-            'test/cctest/test_node_crypto.cc',
-          ]
-        }],
-        ['v8_enable_inspector==1', {
-          'sources': [
-            'test/cctest/test_inspector_socket.cc',
-            'test/cctest/test_inspector_socket_server.cc'
-          ],
-          'defines': [
-            'HAVE_INSPECTOR=1',
-          ],
-        }, {
-           'defines': [
-             'HAVE_INSPECTOR=0',
-           ]
-        }],
-        ['OS=="solaris"', {
-          'ldflags': [ '-I<(SHARED_INTERMEDIATE_DIR)' ]
-        }],
-        # Skip cctest while building shared lib node for Windows
-        [ 'OS=="win" and node_shared=="true"', {
-          'type': 'none',
-        }],
-        [ 'node_shared=="true"', {
-          'xcode_settings': {
-            'OTHER_LDFLAGS': [ '-Wl,-rpath,@loader_path', ],
-          },
-        }],
-        ['OS=="win"', {
-          'libraries': [
-            'Dbghelp.lib',
-            'winmm.lib',
-            'Ws2_32.lib',
-          ],
-        }],
-      ],
-    }, # cctest
-
-    {
-      'target_name': 'embedtest',
-      'type': 'executable',
-
-      'dependencies': [
-        '<(node_lib_target_name)',
-        'deps/histogram/histogram.gyp:histogram',
-        'deps/uvwasi/uvwasi.gyp:uvwasi',
-        'node_dtrace_header',
-        'node_dtrace_ustack',
-        'node_dtrace_provider',
-      ],
-
-      'includes': [
-        'node.gypi'
-      ],
-
-      'include_dirs': [
-        'src',
-        'tools/msvs/genfiles',
-        'deps/v8/include',
-        'deps/cares/include',
-        'deps/uv/include',
-        'deps/uvwasi/include',
-        'test/embedding',
-      ],
-
-      'sources': [
-        'src/node_snapshot_stub.cc',
-        'src/node_code_cache_stub.cc',
-        'test/embedding/embedtest.cc',
-      ],
-
-      'conditions': [
-        ['OS=="solaris"', {
-          'ldflags': [ '-I<(SHARED_INTERMEDIATE_DIR)' ]
-        }],
-        # Skip cctest while building shared lib node for Windows
-        [ 'OS=="win" and node_shared=="true"', {
-          'type': 'none',
-        }],
-        [ 'node_shared=="true"', {
-          'xcode_settings': {
-            'OTHER_LDFLAGS': [ '-Wl,-rpath,@loader_path', ],
-          },
-        }],
-        ['OS=="win"', {
-          'libraries': [
-            'Dbghelp.lib',
-            'winmm.lib',
-            'Ws2_32.lib',
-          ],
-        }],
-      ],
-    }, # embedtest
-
-    {
-      'target_name': 'overlapped-checker',
-      'type': 'executable',
-
-      'conditions': [
-        ['OS=="win"', {
-          'sources': [
-            'test/overlapped-checker/main_win.c'
-          ],
-        }],
-        ['OS!="win"', {
-          'sources': [
-            'test/overlapped-checker/main_unix.c'
-          ],
-        }],
-      ]
-    }, # overlapped-checker
-
-    # TODO(joyeecheung): do not depend on node_lib,
-    # instead create a smaller static library node_lib_base that does
-    # just enough for node_native_module.cc and the cache builder to
-    # compile without compiling the generated code cache C++ file.
-    # So generate_code_cache -> mkcodecache -> node_lib_base,
-    #    node_lib -> node_lib_base & generate_code_cache
-    {
-      'target_name': 'mkcodecache',
-      'type': 'executable',
-
-      'dependencies': [
-        '<(node_lib_target_name)',
-        'deps/histogram/histogram.gyp:histogram',
-        'deps/uvwasi/uvwasi.gyp:uvwasi',
-      ],
-
-      'includes': [
-        'node.gypi'
-      ],
-
-      'include_dirs': [
-        'src',
-        'tools/msvs/genfiles',
-        'deps/v8/include',
-        'deps/cares/include',
-        'deps/uv/include',
-        'deps/uvwasi/include',
-      ],
-
-      'defines': [
-        'NODE_WANT_INTERNALS=1'
-      ],
-      'sources': [
-        'src/node_snapshot_stub.cc',
-        'src/node_code_cache_stub.cc',
-        'tools/code_cache/mkcodecache.cc',
-        'tools/code_cache/cache_builder.cc',
-        'tools/code_cache/cache_builder.h',
-      ],
-
-      'conditions': [
-        [ 'node_use_openssl=="true"', {
-          'defines': [
-            'HAVE_OPENSSL=1',
-          ],
-        }],
-        ['v8_enable_inspector==1', {
-          'defines': [
-            'HAVE_INSPECTOR=1',
-          ],
-        }],
-        ['OS=="win"', {
-          'libraries': [
-            'dbghelp.lib',
-            'PsApi.lib',
-            'winmm.lib',
-            'Ws2_32.lib',
-          ],
-        }],
-      ],
-    }, # mkcodecache
-    {
-      'target_name': 'node_mksnapshot',
-      'type': 'executable',
-
-      'dependencies': [
-        '<(node_lib_target_name)',
-        'deps/histogram/histogram.gyp:histogram',
-        'deps/uvwasi/uvwasi.gyp:uvwasi',
-      ],
-
-      'includes': [
-        'node.gypi'
-      ],
-
-      'include_dirs': [
-        'src',
-        'tools/msvs/genfiles',
-        'deps/v8/include',
-        'deps/cares/include',
-        'deps/uv/include',
-        'deps/uvwasi/include',
-      ],
-
-      'defines': [ 'NODE_WANT_INTERNALS=1' ],
-
-      'sources': [
-        'src/node_snapshot_stub.cc',
-        'src/node_code_cache_stub.cc',
-        'tools/snapshot/node_mksnapshot.cc',
-      ],
-
-      'conditions': [
-        [ 'node_use_openssl=="true"', {
-          'defines': [
-            'HAVE_OPENSSL=1',
-          ],
-        }],
-        ['v8_enable_inspector==1', {
-          'defines': [
-            'HAVE_INSPECTOR=1',
-          ],
-        }],
-        ['OS=="win"', {
-          'libraries': [
-            'Dbghelp.lib',
-            'winmm.lib',
-            'Ws2_32.lib',
-          ],
-        }],
-      ],
-    }, # node_mksnapshot
   ], # end targets
 
   'conditions': [
diff --git a/tools/v8_gypfiles/v8.gyp b/tools/v8_gypfiles/v8.gyp
index 39b96803c7..bcd66b9db0 100644
--- a/tools/v8_gypfiles/v8.gyp
+++ b/tools/v8_gypfiles/v8.gyp
@@ -1277,6 +1277,10 @@
       'dependencies': [
         'v8_libbase',
       ],
+      'direct_dependent_settings': {
+        'defines': ['USING_V8_PLATFORM_SHARED'],
+      },
+      'defines': ['BUILDING_V8_PLATFORM_SHARED'],
       'sources': [
         '<(V8_ROOT)/base/trace_event/common/trace_event_common.h',
         '<(V8_ROOT)/include/libplatform/libplatform-export.h',
@@ -1305,12 +1309,6 @@
         '<(V8_ROOT)/src/libplatform/worker-thread.h',
       ],
       'conditions': [
-        ['component=="shared_library"', {
-          'direct_dependent_settings': {
-            'defines': ['USING_V8_PLATFORM_SHARED'],
-          },
-          'defines': ['BUILDING_V8_PLATFORM_SHARED'],
-        }],
         ['v8_use_perfetto==1', {
           'sources!': [
             '<(V8_ROOT)/base/trace_event/common/trace_event_common.h',
